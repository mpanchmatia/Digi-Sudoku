from flask import Flask, request, render_template, Response, jsonify
import random
from sudoku import ClassicSudoku

app = Flask(__name__)

"""
Sudoku Puzzles
"""

puzzle = [  # Just for test
            "009053074500720063723080950000001002002000400400200000086010547970038006210670300" ,
            "607320500420089700000001030200007098090806050370900001040600000001290064006078103",
            # A to Z of Sudoku. Chapter 2
            "640509800000030070308010004000007000400965007000300000800090403020050000003604092",
            "090206018010000000000500906604000830000402000089000201201009000000000060930801020",
            "640000080210000000380010067758621349923457816461000752104278605576130028802000070",
            "003500040075860000012070000000210003006300508000000120030050400680000070701000000",
            "600812030300050627020000080007528004000000018000043000050604200003001000100070800",
            "409070300310590400602483109534768921290314705701259043045037200000025034023040507",
            "063501047075860000012070050548219763126347598397685124239750400684100075751000000",
            "067542001234000007000000246046705100000196004009004060458000010703400685600853470",
            "014000900030491070789200041041000200860000497007000160170902004000310720008000510",
            # A to Z of Sudoku. Chapter 2 and 3
            "903050006000000070086007509000006002605083090000002060000370008042098000039000004",
            # A to Z of Sudoku. Chapter 3
            "973051206254009070186007509000006002625083090000002060561374928742198600839005714",
            "891576234600100978200900516786000091510060000340701600908007000400003000160840020"
            ]


puzzle_nonw = [  # A to Z of Sudoku. Chapter 3
            "106089734840300000030100080385491672764823050200675348678000013000038467403716805",
            "100049586095700140064150700530812407700604051001500020010080970008900210050401008",
            "800945172942176300157283009594700000018304200020508014001800500009657021205400006",
            "028000395306000178010830642137529864000080010680140500561078400293400786874000051",
            "640009080800400600090308050079082000400076000000000800728000590900850706060090000"
    ]

answer = [  # Just for test
            "869153274541729863723486951658341792192867435437295618386912547974538126215674389",
            "617324589423589716589761432265147398194836257378952641842613975731295864956478123",
            # A to Z of Sudoku. Chapter 2
            "642579831159438276378216954536827149481965327297341685865792413924153768713684592",
            "597236418816974352342518976624197835153482697789653241261749583478325169935861724",
            "645793281217846593389512467758621349923457816461389752194278635576134928832965174",
            "963521847475863219812974356548219763126347598397685124239756481684132975751498632",
            "679812435381459627524367189917528364432796518865143972758634291243981756196275843",
            "459172368318596472672483159534768921296314785781259643945837216167925834823641597",
            "963521847475863219812974356548219763126347598397685124239756481684132975751498632",
            "867542391234961857915378246346785129582196734179234568458627913723419685691853472",
            "614837952532491876789265341941786235865123497327549168173952684456318729298674513",
            # A to Z of Sudoku. Chapter 2 and 3
            "973451286254869173186237549317946852625783491498512367561374928742198635839625714",
            # A to Z of Sudoku. Chapter 3
            "973451286254869173186237549317946852625783491498512367561374928742198635839625714",
            "891576234635124978274938516786452391512369847349781652958217463427693185163845729"
            ]

@app.route("/new")
def NewSudoku():
    index = request.args.get('challenge', '')
    if index == '':
        index = random.randrange(0, len(puzzle))
    strInput = puzzle[int(index)]
    return render_template('new_sudoku.html', strInput=strInput )

@app.route("/add")
def AddSudoku():
    return render_template("add_sudoku.html")

@app.route("/display_all")
def DisplayAllSudoku():
    return render_template("display_all_sudoku.html", puzzle = puzzle)

@app.route("/submit")
def SubmitSudoku():
    strInput = request.args.get('challenge', '')
    puzzle.append(strInput)
    size = len(puzzle)
    index = size - 1
    return render_template('submit_sudoku.html', index=str(index))

@app.route("/")
def Index():
    return render_template('index.html')

@app.route("/solve")
def SolveSudoku():
    strInput = request.args.get('challenge', '')
    s = ClassicSudoku()
    s.Load(strInput)
    s.Solve()
    print(s.strOutput)
    render = {
        'ip' : s.strInput,
        'op' : s.strOutput,
    }
    return render_template('solve_sudoku.html', render=render)

@app.route("/test_all")
def TestAllSudoku():
    count = 0
    for i in range(len(puzzle)):
        s = ClassicSudoku()
        s.Load(puzzle[i])
        s.Solve()
        if(s.strOutput == answer[i]):
            count = count + 1
        else:
            print(s.strOutput)
        del s
    str = "{} out of {} test cases are passed"
    return str.format(count, len(puzzle))

if __name__ == '__main__':
    app.run()
